{"ast":null,"code":"import _classCallCheck from \"/home/alexandra/Documents/dev/fullstack-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/alexandra/Documents/dev/fullstack-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/alexandra/Documents/dev/fullstack-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/alexandra/Documents/dev/fullstack-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/alexandra/Documents/dev/fullstack-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _styled from \"styled-components\";\nvar _jsxFileName = \"/home/alexandra/Documents/dev/fullstack-app/src/App.js\";\n// /client/App.js\nimport React, { Component } from 'react';\nimport axios from 'axios';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      data: [],\n      id: 0,\n      message: null,\n      intervalIsSet: false,\n      idToDelete: null,\n      idToUpdate: null,\n      objectToUpdate: null // when component mounts, first thing it does is fetch all existing data in our db\n      // then we incorporate a polling logic so that we can easily see if our db has\n      // changed and implement those changes into our UI\n\n    };\n\n    _this.getDataFromDb = function () {\n      fetch('http://localhost:3001/api/getData').then(function (data) {\n        return data.json();\n      }).then(function (res) {\n        return _this.setState({\n          data: res.data\n        });\n      });\n    };\n\n    _this.putDataToDB = function (message) {\n      var currentIds = _this.state.data.map(function (data) {\n        return data.id;\n      });\n\n      var idToBeAdded = 0;\n\n      while (currentIds.includes(idToBeAdded)) {\n        ++idToBeAdded;\n      }\n\n      axios.post('http://localhost:3001/api/putData', {\n        id: idToBeAdded,\n        message: message\n      });\n    };\n\n    _this.deleteFromDB = function (idTodelete) {\n      axios.delete('http://localhost:3001/api/deleteData', {\n        data: {\n          id: idTodelete\n        }\n      });\n    };\n\n    _this.updateDB = function (idToUpdate, updateToApply) {\n      axios.post('http://localhost:3001/api/updateData', {\n        id: idToUpdate,\n        message: updateToApply\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getDataFromDb();\n\n      if (!this.state.intervalIsSet) {\n        var interval = setInterval(this.getDataFromDb, 1000);\n        this.setState({\n          intervalIsSet: interval\n        });\n      }\n    } // never let a process live forever\n    // always kill a process everytime we are done using it\n\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.state.intervalIsSet) {\n        clearInterval(this.state.intervalIsSet);\n        this.setState({\n          intervalIsSet: null\n        });\n      }\n    } // here, in the front end, we use the id key of our data object\n    // in order to identify which we want to Update or delete.\n    // for our back end, we use the object id assigned by MongoDB to modify\n    // data base entries\n    // our first get method that uses our backend api to\n    // fetch data from our data base\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var data = this.state.data;\n      console.log(this.state);\n      return React.createElement(React.Fragment, null, React.createElement(MainWrap, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, React.createElement(Guestlist, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(Line, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, data.length <= 0 ? 'NO DB ENTRIES YET' : data.map(function (dat) {\n        return React.createElement(Point, {\n          key: data.message,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          style: {\n            color: 'gray'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97\n          },\n          __self: this\n        }, \" Number: \"), \" \", dat.id, ' ', React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98\n          },\n          __self: this\n        }), React.createElement(\"span\", {\n          style: {\n            color: 'gray'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99\n          },\n          __self: this\n        }, \" Name: \"), dat.message);\n      }))), React.createElement(Functions, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        style: {\n          padding: '10px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        onChange: function onChange(e) {\n          return _this2.setState({\n            message: e.target.value\n          });\n        },\n        placeholder: \"Fill the name of the guest\",\n        style: {\n          width: '200px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        onClick: function onClick() {\n          return _this2.putDataToDB(_this2.state.message);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, \"ADD\")), React.createElement(\"div\", {\n        style: {\n          padding: '10px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        style: {\n          width: '200px'\n        },\n        onChange: function onChange(e) {\n          return _this2.setState({\n            idToDelete: e.target.value\n          });\n        },\n        placeholder: \"Write in the number of the guest\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        onClick: function onClick() {\n          return _this2.deleteFromDB(_this2.state.idToDelete);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, \"DELETE\")), React.createElement(\"div\", {\n        style: {\n          padding: '10px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        style: {\n          width: '200px'\n        },\n        onChange: function onChange(e) {\n          return _this2.setState({\n            idToUpdate: e.target.value\n          });\n        },\n        placeholder: \"Write in the number of the guest\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"text\",\n        style: {\n          width: '200px'\n        },\n        onChange: function onChange(e) {\n          return _this2.setState({\n            updateToApply: e.target.value\n          });\n        },\n        placeholder: \"Write in the new name of the guest\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        onClick: function onClick() {\n          return _this2.updateDB(_this2.state.idToUpdate, _this2.state.updateToApply);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }, \"UPDATE\")))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;\n\nvar MainWrap = _styled.div.withConfig({\n  displayName: \"App__MainWrap\",\n  componentId: \"sc-1tc4o2e-0\"\n})([\"display:flex;margin-top:100px;margin-left:100px;justify-content:space-around;\"]);\n\nvar Line = _styled.ul.withConfig({\n  displayName: \"App__Line\",\n  componentId: \"sc-1tc4o2e-1\"\n})([\"display:flex;flex-direction:row;width:50%;flex-wrap:wrap;justify-content:flex-start;\"]);\n\nvar Point = _styled.li.withConfig({\n  displayName: \"App__Point\",\n  componentId: \"sc-1tc4o2e-2\"\n})([\"list-style:none;padding:10px;\"]);\n\nvar Functions = _styled.div.withConfig({\n  displayName: \"App__Functions\",\n  componentId: \"sc-1tc4o2e-3\"\n})([\"display:flex;width:30%;flex-direction:column;\"]);\n\nvar Guestlist = _styled.div.withConfig({\n  displayName: \"App__Guestlist\",\n  componentId: \"sc-1tc4o2e-4\"\n})([\"display:flex;width:10%;\"]);","map":{"version":3,"sources":["/home/alexandra/Documents/dev/fullstack-app/src/App.js"],"names":["React","Component","axios","App","state","data","id","message","intervalIsSet","idToDelete","idToUpdate","objectToUpdate","getDataFromDb","fetch","then","json","res","setState","putDataToDB","currentIds","map","idToBeAdded","includes","post","deleteFromDB","idTodelete","delete","updateDB","updateToApply","interval","setInterval","clearInterval","console","log","length","dat","color","padding","e","target","value","width","MainWrap","styled","div","Line","ul","Point","li","Functions","Guestlist"],"mappings":"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","sourcesContent":["// /client/App.js\nimport React, { Component } from 'react'\nimport axios from 'axios'\nimport styled from 'styled-components/macro'\n\nclass App extends Component {\n  // initialize our state\n  state = {\n    data: [],\n    id: 0,\n    message: null,\n    intervalIsSet: false,\n    idToDelete: null,\n    idToUpdate: null,\n    objectToUpdate: null,\n  }\n\n  // when component mounts, first thing it does is fetch all existing data in our db\n  // then we incorporate a polling logic so that we can easily see if our db has\n  // changed and implement those changes into our UI\n  componentDidMount() {\n    this.getDataFromDb()\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDb, 1000)\n      this.setState({ intervalIsSet: interval })\n    }\n  }\n\n  // never let a process live forever\n  // always kill a process everytime we are done using it\n  componentWillUnmount() {\n    if (this.state.intervalIsSet) {\n      clearInterval(this.state.intervalIsSet)\n      this.setState({ intervalIsSet: null })\n    }\n  }\n\n  // here, in the front end, we use the id key of our data object\n  // in order to identify which we want to Update or delete.\n  // for our back end, we use the object id assigned by MongoDB to modify\n  // data base entries\n\n  // our first get method that uses our backend api to\n  // fetch data from our data base\n  getDataFromDb = () => {\n    fetch('http://localhost:3001/api/getData')\n      .then(data => data.json())\n      .then(res => this.setState({ data: res.data }))\n  }\n\n  // our put method that uses our backend api\n  // to create new query into our data base\n  putDataToDB = message => {\n    let currentIds = this.state.data.map(data => data.id)\n    let idToBeAdded = 0\n    while (currentIds.includes(idToBeAdded)) {\n      ++idToBeAdded\n    }\n\n    axios.post('http://localhost:3001/api/putData', {\n      id: idToBeAdded,\n      message: message,\n    })\n  }\n\n  // our delete method that uses our backend api\n  // to remove existing database information\n  deleteFromDB = idTodelete => {\n    axios.delete('http://localhost:3001/api/deleteData', {\n      data: {\n        id: idTodelete,\n      },\n    })\n  }\n\n  // our update method that uses our backend api\n  // to overwrite existing data base information\n  updateDB = (idToUpdate, updateToApply) => {\n    axios.post('http://localhost:3001/api/updateData', {\n      id: idToUpdate,\n      message: updateToApply,\n    })\n  }\n\n  render() {\n    const { data } = this.state\n    console.log(this.state)\n    return (\n      <>\n        <MainWrap>\n          <Guestlist>\n            <Line>\n              {data.length <= 0\n                ? 'NO DB ENTRIES YET'\n                : data.map(dat => (\n                    <Point key={data.message}>\n                      <span style={{ color: 'gray' }}> Number: </span> {dat.id}{' '}\n                      <br />\n                      <span style={{ color: 'gray' }}> Name: </span>\n                      {dat.message}\n                    </Point>\n                  ))}\n            </Line>\n          </Guestlist>\n          <Functions>\n            <div style={{ padding: '10px' }}>\n              <input\n                type=\"text\"\n                onChange={e => this.setState({ message: e.target.value })}\n                placeholder=\"Fill the name of the guest\"\n                style={{ width: '200px' }}\n              />\n              <button onClick={() => this.putDataToDB(this.state.message)}>\n                ADD\n              </button>\n            </div>\n            <div style={{ padding: '10px' }}>\n              <input\n                type=\"text\"\n                style={{ width: '200px' }}\n                onChange={e => this.setState({ idToDelete: e.target.value })}\n                placeholder=\"Write in the number of the guest\"\n              />\n              <button onClick={() => this.deleteFromDB(this.state.idToDelete)}>\n                DELETE\n              </button>\n            </div>\n            <div style={{ padding: '10px' }}>\n              <input\n                type=\"text\"\n                style={{ width: '200px' }}\n                onChange={e => this.setState({ idToUpdate: e.target.value })}\n                placeholder=\"Write in the number of the guest\"\n              />\n              <input\n                type=\"text\"\n                style={{ width: '200px' }}\n                onChange={e => this.setState({ updateToApply: e.target.value })}\n                placeholder=\"Write in the new name of the guest\"\n              />\n              <button\n                onClick={() =>\n                  this.updateDB(this.state.idToUpdate, this.state.updateToApply)\n                }\n              >\n                UPDATE\n              </button>\n            </div>\n          </Functions>\n        </MainWrap>\n      </>\n    )\n  }\n}\n\nexport default App\n\nconst MainWrap = styled.div`\n  display: flex;\n  margin-top: 100px;\n  margin-left: 100px;\n  justify-content: space-around;\n`\nconst Line = styled.ul`\n  display: flex;\n  flex-direction: row;\n  width: 50%;\n  flex-wrap: wrap;\n  justify-content: flex-start;\n`\nconst Point = styled.li`\n  list-style: none;\n  padding: 10px;\n`\nconst Functions = styled.div`\n  display: flex;\n  width: 30%;\n  flex-direction: column;\n`\nconst Guestlist = styled.div`\n  display: flex;\n  width: 10%;\n`\n"]},"metadata":{},"sourceType":"module"}