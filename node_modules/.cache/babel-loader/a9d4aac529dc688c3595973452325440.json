{"ast":null,"code":"import _taggedTemplateLiteral from \"/home/alexandra/Documents/dev/fullstack-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _classCallCheck from \"/home/alexandra/Documents/dev/fullstack-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/alexandra/Documents/dev/fullstack-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/alexandra/Documents/dev/fullstack-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/alexandra/Documents/dev/fullstack-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/alexandra/Documents/dev/fullstack-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport { createGlobalStyle as _createGlobalStyle } from \"styled-components\";\nimport _styled from \"styled-components\";\nvar _jsxFileName = \"/home/alexandra/Documents/dev/fullstack-app/src/App.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  body {\\n    @import url('https://fonts.googleapis.com/css?family=Heebo');\\n    font-family: 'Heebo', sans-serif;\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\n// /client/App.js\nimport React, { Component } from 'react';\nimport axios from 'axios';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      data: [],\n      id: 0,\n      message: null,\n      intervalIsSet: false,\n      idToDelete: null,\n      idToUpdate: null,\n      objectToUpdate: null // when component mounts, first thing it does is fetch all existing data in our db\n      // then we incorporate a polling logic so that we can easily see if our db has\n      // changed and implement those changes into our UI\n\n    };\n\n    _this.getDataFromDb = function () {\n      fetch('http://localhost:3001/api/getData').then(function (data) {\n        return data.json();\n      }).then(function (res) {\n        return _this.setState({\n          data: res.data\n        });\n      });\n    };\n\n    _this.putDataToDB = function (message) {\n      var currentIds = _this.state.data.map(function (data) {\n        return data.id;\n      });\n\n      var idToBeAdded = 0;\n\n      while (currentIds.includes(idToBeAdded)) {\n        ++idToBeAdded;\n      }\n\n      axios.post('http://localhost:3001/api/putData', {\n        id: idToBeAdded,\n        message: message\n      });\n    };\n\n    _this.deleteFromDB = function (idTodelete) {\n      axios.delete('http://localhost:3001/api/deleteData', {\n        data: {\n          id: idTodelete\n        }\n      });\n    };\n\n    _this.updateDB = function (idToUpdate, updateToApply) {\n      axios.post('http://localhost:3001/api/updateData', {\n        id: idToUpdate,\n        message: updateToApply\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getDataFromDb();\n\n      if (!this.state.intervalIsSet) {\n        var interval = setInterval(this.getDataFromDb, 1000);\n        this.setState({\n          intervalIsSet: interval\n        });\n      }\n    } // never let a process live forever\n    // always kill a process everytime we are done using it\n\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.state.intervalIsSet) {\n        clearInterval(this.state.intervalIsSet);\n        this.setState({\n          intervalIsSet: null\n        });\n      }\n    } // here, in the front end, we use the id key of our data object\n    // in order to identify which we want to Update or delete.\n    // for our back end, we use the object id assigned by MongoDB to modify\n    // data base entries\n    // our first get method that uses our backend api to\n    // fetch data from our data base\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var data = this.state.data;\n      console.log(this.state);\n      return React.createElement(React.Fragment, null, React.createElement(MainWrap, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, React.createElement(Guestlist, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(Title, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, \"Guest List\"), React.createElement(Line, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, data.length <= 0 ? 'NO DB ENTRIES YET' : data.map(function (dat) {\n        return React.createElement(Point, {\n          key: data.message,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98\n          },\n          __self: this\n        }, React.createElement(Message, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100\n          },\n          __self: this\n        }), \" \", dat.id, \" \", React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100\n          },\n          __self: this\n        }), React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101\n          },\n          __self: this\n        }, \" Name: \"), dat.message));\n      }))), React.createElement(Functions, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        style: {\n          padding: '10px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, React.createElement(Input, {\n        type: \"text\",\n        onChange: function onChange(e) {\n          return _this2.setState({\n            message: e.target.value\n          });\n        },\n        placeholder: \"Fill the name of the guest\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }), React.createElement(Button, {\n        onClick: function onClick() {\n          return _this2.putDataToDB(_this2.state.message);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, React.createElement(ButtonText, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, \"ADD\"))), React.createElement(\"div\", {\n        style: {\n          padding: '10px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, React.createElement(Input, {\n        type: \"text\",\n        onChange: function onChange(e) {\n          return _this2.setState({\n            idToDelete: e.target.value\n          });\n        },\n        placeholder: \"Write in the number of the guest\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }), React.createElement(Button, {\n        onClick: function onClick() {\n          return _this2.deleteFromDB(_this2.state.idToDelete);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, React.createElement(ButtonText, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, \" DELETE\"))), React.createElement(\"div\", {\n        style: {\n          padding: '10px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, React.createElement(Input, {\n        type: \"text\",\n        onChange: function onChange(e) {\n          return _this2.setState({\n            idToUpdate: e.target.value\n          });\n        },\n        placeholder: \"Write in the number of the guest\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }), React.createElement(Input, {\n        type: \"text\",\n        onChange: function onChange(e) {\n          return _this2.setState({\n            updateToApply: e.target.value\n          });\n        },\n        placeholder: \"Write in the new name of the guest\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }), React.createElement(Button, {\n        onClick: function onClick() {\n          return _this2.updateDB(_this2.state.idToUpdate, _this2.state.updateToApply);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, React.createElement(ButtonText, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, \"UPDATE\")))), React.createElement(GlobalStyles, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;\n\nvar GlobalStyles = _createGlobalStyle(_templateObject());\n\nvar MainWrap = _styled.div.withConfig({\n  displayName: \"App__MainWrap\",\n  componentId: \"sc-1tc4o2e-0\"\n})([\"display:flex;margin-top:10%;margin-left:10%;margin-right:10%;justify-content:space-around;\"]);\n\nvar Line = _styled.ul.withConfig({\n  displayName: \"App__Line\",\n  componentId: \"sc-1tc4o2e-1\"\n})([\"display:flex;flex-direction:row;width:50%;flex-wrap:wrap;justify-content:flex-start;\"]);\n\nvar Point = _styled.li.withConfig({\n  displayName: \"App__Point\",\n  componentId: \"sc-1tc4o2e-2\"\n})([\"list-style:none;padding:10px;\"]);\n\nvar Functions = _styled.div.withConfig({\n  displayName: \"App__Functions\",\n  componentId: \"sc-1tc4o2e-3\"\n})([\"display:flex;width:40%;flex-direction:column;\"]);\n\nvar Guestlist = _styled.div.withConfig({\n  displayName: \"App__Guestlist\",\n  componentId: \"sc-1tc4o2e-4\"\n})([\"display:flex;width:30%;flex-direction:column;\"]);\n\nvar Title = _styled.h1.withConfig({\n  displayName: \"App__Title\",\n  componentId: \"sc-1tc4o2e-5\"\n})([\"\"]);\n\nvar Input = _styled.input.withConfig({\n  displayName: \"App__Input\",\n  componentId: \"sc-1tc4o2e-6\"\n})([\"border:2px solid #fff829;padding:20px;width:55%;margin:10px;\"]);\n\nvar Button = _styled.button.withConfig({\n  displayName: \"App__Button\",\n  componentId: \"sc-1tc4o2e-7\"\n})([\"margin-left:50px;padding:10px;border:none;min-width:100px;background-color:#ffff99;\"]);\n\nvar ButtonText = _styled.p.withConfig({\n  displayName: \"App__ButtonText\",\n  componentId: \"sc-1tc4o2e-8\"\n})([\"font-weight:bold;\"]);\n\nvar Message = _styled.div.withConfig({\n  displayName: \"App__Message\",\n  componentId: \"sc-1tc4o2e-9\"\n})([\"display:flex;\"]);","map":{"version":3,"sources":["/home/alexandra/Documents/dev/fullstack-app/src/App.js"],"names":["React","Component","axios","App","state","data","id","message","intervalIsSet","idToDelete","idToUpdate","objectToUpdate","getDataFromDb","fetch","then","json","res","setState","putDataToDB","currentIds","map","idToBeAdded","includes","post","deleteFromDB","idTodelete","delete","updateDB","updateToApply","interval","setInterval","clearInterval","console","log","length","dat","padding","e","target","value","GlobalStyles","createGlobalStyle","MainWrap","styled","div","Line","ul","Point","li","Functions","Guestlist","Title","h1","Input","input","Button","button","ButtonText","p","Message"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;IAGMC,G;;;;;;;;;;;;;;;;;UAEJC,K,GAAQ;AACNC,MAAAA,IAAI,EAAE,EADA;AAENC,MAAAA,EAAE,EAAE,CAFE;AAGNC,MAAAA,OAAO,EAAE,IAHH;AAINC,MAAAA,aAAa,EAAE,KAJT;AAKNC,MAAAA,UAAU,EAAE,IALN;AAMNC,MAAAA,UAAU,EAAE,IANN;AAONC,MAAAA,cAAc,EAAE,IAPV,CAUR;AACA;AACA;;AAZQ,K;;UAqCRC,a,GAAgB,YAAM;AACpBC,MAAAA,KAAK,CAAC,mCAAD,CAAL,CACGC,IADH,CACQ,UAAAT,IAAI;AAAA,eAAIA,IAAI,CAACU,IAAL,EAAJ;AAAA,OADZ,EAEGD,IAFH,CAEQ,UAAAE,GAAG;AAAA,eAAI,MAAKC,QAAL,CAAc;AAAEZ,UAAAA,IAAI,EAAEW,GAAG,CAACX;AAAZ,SAAd,CAAJ;AAAA,OAFX;AAGD,K;;UAIDa,W,GAAc,UAAAX,OAAO,EAAI;AACvB,UAAIY,UAAU,GAAG,MAAKf,KAAL,CAAWC,IAAX,CAAgBe,GAAhB,CAAoB,UAAAf,IAAI;AAAA,eAAIA,IAAI,CAACC,EAAT;AAAA,OAAxB,CAAjB;;AACA,UAAIe,WAAW,GAAG,CAAlB;;AACA,aAAOF,UAAU,CAACG,QAAX,CAAoBD,WAApB,CAAP,EAAyC;AACvC,UAAEA,WAAF;AACD;;AAEDnB,MAAAA,KAAK,CAACqB,IAAN,CAAW,mCAAX,EAAgD;AAC9CjB,QAAAA,EAAE,EAAEe,WAD0C;AAE9Cd,QAAAA,OAAO,EAAEA;AAFqC,OAAhD;AAID,K;;UAIDiB,Y,GAAe,UAAAC,UAAU,EAAI;AAC3BvB,MAAAA,KAAK,CAACwB,MAAN,CAAa,sCAAb,EAAqD;AACnDrB,QAAAA,IAAI,EAAE;AACJC,UAAAA,EAAE,EAAEmB;AADA;AAD6C,OAArD;AAKD,K;;UAIDE,Q,GAAW,UAACjB,UAAD,EAAakB,aAAb,EAA+B;AACxC1B,MAAAA,KAAK,CAACqB,IAAN,CAAW,sCAAX,EAAmD;AACjDjB,QAAAA,EAAE,EAAEI,UAD6C;AAEjDH,QAAAA,OAAO,EAAEqB;AAFwC,OAAnD;AAID,K;;;;;;;wCA9DmB;AAClB,WAAKhB,aAAL;;AACA,UAAI,CAAC,KAAKR,KAAL,CAAWI,aAAhB,EAA+B;AAC7B,YAAIqB,QAAQ,GAAGC,WAAW,CAAC,KAAKlB,aAAN,EAAqB,IAArB,CAA1B;AACA,aAAKK,QAAL,CAAc;AAAET,UAAAA,aAAa,EAAEqB;AAAjB,SAAd;AACD;AACF,K,CAED;AACA;;;;2CACuB;AACrB,UAAI,KAAKzB,KAAL,CAAWI,aAAf,EAA8B;AAC5BuB,QAAAA,aAAa,CAAC,KAAK3B,KAAL,CAAWI,aAAZ,CAAb;AACA,aAAKS,QAAL,CAAc;AAAET,UAAAA,aAAa,EAAE;AAAjB,SAAd;AACD;AACF,K,CAED;AACA;AACA;AACA;AAEA;AACA;;;;6BAyCS;AAAA;;AAAA,UACCH,IADD,GACU,KAAKD,KADf,CACCC,IADD;AAEP2B,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAK7B,KAAjB;AACA,aACE,0CACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,EAGE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGC,IAAI,CAAC6B,MAAL,IAAe,CAAf,GACG,mBADH,GAEG7B,IAAI,CAACe,GAAL,CAAS,UAAAe,GAAG;AAAA,eACV,oBAAC,KAAD;AAAO,UAAA,GAAG,EAAE9B,IAAI,CAACE,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,OACY4B,GAAG,CAAC7B,EADhB,OACoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADpB,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAFF,EAGG6B,GAAG,CAAC5B,OAHP,CADF,CADU;AAAA,OAAZ,CAHN,CAHF,CADF,EAkBE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,KAAK,EAAE;AAAE6B,UAAAA,OAAO,EAAE;AAAX,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,KAAD;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,QAAQ,EAAE,kBAAAC,CAAC;AAAA,iBAAI,MAAI,CAACpB,QAAL,CAAc;AAAEV,YAAAA,OAAO,EAAE8B,CAAC,CAACC,MAAF,CAASC;AAApB,WAAd,CAAJ;AAAA,SAFb;AAGE,QAAA,WAAW,EAAC,4BAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAME,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAE;AAAA,iBAAM,MAAI,CAACrB,WAAL,CAAiB,MAAI,CAACd,KAAL,CAAWG,OAA5B,CAAN;AAAA,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,CANF,CADF,EAWE;AAAK,QAAA,KAAK,EAAE;AAAE6B,UAAAA,OAAO,EAAE;AAAX,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,KAAD;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,QAAQ,EAAE,kBAAAC,CAAC;AAAA,iBAAI,MAAI,CAACpB,QAAL,CAAc;AAAER,YAAAA,UAAU,EAAE4B,CAAC,CAACC,MAAF,CAASC;AAAvB,WAAd,CAAJ;AAAA,SAFb;AAGE,QAAA,WAAW,EAAC,kCAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAME,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAE;AAAA,iBAAM,MAAI,CAACf,YAAL,CAAkB,MAAI,CAACpB,KAAL,CAAWK,UAA7B,CAAN;AAAA,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,CANF,CAXF,EAqBE;AAAK,QAAA,KAAK,EAAE;AAAE2B,UAAAA,OAAO,EAAE;AAAX,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,KAAD;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,QAAQ,EAAE,kBAAAC,CAAC;AAAA,iBAAI,MAAI,CAACpB,QAAL,CAAc;AAAEP,YAAAA,UAAU,EAAE2B,CAAC,CAACC,MAAF,CAASC;AAAvB,WAAd,CAAJ;AAAA,SAFb;AAGE,QAAA,WAAW,EAAC,kCAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAME,oBAAC,KAAD;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,QAAQ,EAAE,kBAAAF,CAAC;AAAA,iBAAI,MAAI,CAACpB,QAAL,CAAc;AAAEW,YAAAA,aAAa,EAAES,CAAC,CAACC,MAAF,CAASC;AAA1B,WAAd,CAAJ;AAAA,SAFb;AAGE,QAAA,WAAW,EAAC,oCAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QANF,EAWE,oBAAC,MAAD;AACE,QAAA,OAAO,EAAE;AAAA,iBACP,MAAI,CAACZ,QAAL,CAAc,MAAI,CAACvB,KAAL,CAAWM,UAAzB,EAAqC,MAAI,CAACN,KAAL,CAAWwB,aAAhD,CADO;AAAA,SADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAKE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBALF,CAXF,CArBF,CAlBF,EA2DE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QA3DF,CADF,CADF;AAiED;;;;EAnJe3B,S;;AAsJlB,eAAeE,GAAf;;AAEA,IAAMqC,YAAY,GAAGC,kBAAH,mBAAlB;;AAOA,IAAMC,QAAQ,GAAGC,OAAM,CAACC,GAAV;AAAA;AAAA;AAAA,kGAAd;;AAOA,IAAMC,IAAI,GAAGF,OAAM,CAACG,EAAV;AAAA;AAAA;AAAA,4FAAV;;AAOA,IAAMC,KAAK,GAAGJ,OAAM,CAACK,EAAV;AAAA;AAAA;AAAA,qCAAX;;AAIA,IAAMC,SAAS,GAAGN,OAAM,CAACC,GAAV;AAAA;AAAA;AAAA,qDAAf;;AAKA,IAAMM,SAAS,GAAGP,OAAM,CAACC,GAAV;AAAA;AAAA;AAAA,qDAAf;;AAMA,IAAMO,KAAK,GAAGR,OAAM,CAACS,EAAV;AAAA;AAAA;AAAA,QAAX;;AAEA,IAAMC,KAAK,GAAGV,OAAM,CAACW,KAAV;AAAA;AAAA;AAAA,oEAAX;;AAMA,IAAMC,MAAM,GAAGZ,OAAM,CAACa,MAAV;AAAA;AAAA;AAAA,2FAAZ;;AAOA,IAAMC,UAAU,GAAGd,OAAM,CAACe,CAAV;AAAA;AAAA;AAAA,yBAAhB;;AAGA,IAAMC,OAAO,GAAGhB,OAAM,CAACC,GAAV;AAAA;AAAA;AAAA,qBAAb","sourcesContent":["// /client/App.js\nimport React, { Component } from 'react'\nimport axios from 'axios'\nimport styled, { createGlobalStyle } from 'styled-components/macro'\n\nclass App extends Component {\n  // initialize our state\n  state = {\n    data: [],\n    id: 0,\n    message: null,\n    intervalIsSet: false,\n    idToDelete: null,\n    idToUpdate: null,\n    objectToUpdate: null,\n  }\n\n  // when component mounts, first thing it does is fetch all existing data in our db\n  // then we incorporate a polling logic so that we can easily see if our db has\n  // changed and implement those changes into our UI\n  componentDidMount() {\n    this.getDataFromDb()\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDb, 1000)\n      this.setState({ intervalIsSet: interval })\n    }\n  }\n\n  // never let a process live forever\n  // always kill a process everytime we are done using it\n  componentWillUnmount() {\n    if (this.state.intervalIsSet) {\n      clearInterval(this.state.intervalIsSet)\n      this.setState({ intervalIsSet: null })\n    }\n  }\n\n  // here, in the front end, we use the id key of our data object\n  // in order to identify which we want to Update or delete.\n  // for our back end, we use the object id assigned by MongoDB to modify\n  // data base entries\n\n  // our first get method that uses our backend api to\n  // fetch data from our data base\n  getDataFromDb = () => {\n    fetch('http://localhost:3001/api/getData')\n      .then(data => data.json())\n      .then(res => this.setState({ data: res.data }))\n  }\n\n  // our put method that uses our backend api\n  // to create new query into our data base\n  putDataToDB = message => {\n    let currentIds = this.state.data.map(data => data.id)\n    let idToBeAdded = 0\n    while (currentIds.includes(idToBeAdded)) {\n      ++idToBeAdded\n    }\n\n    axios.post('http://localhost:3001/api/putData', {\n      id: idToBeAdded,\n      message: message,\n    })\n  }\n\n  // our delete method that uses our backend api\n  // to remove existing database information\n  deleteFromDB = idTodelete => {\n    axios.delete('http://localhost:3001/api/deleteData', {\n      data: {\n        id: idTodelete,\n      },\n    })\n  }\n\n  // our update method that uses our backend api\n  // to overwrite existing data base information\n  updateDB = (idToUpdate, updateToApply) => {\n    axios.post('http://localhost:3001/api/updateData', {\n      id: idToUpdate,\n      message: updateToApply,\n    })\n  }\n\n  render() {\n    const { data } = this.state\n    console.log(this.state)\n    return (\n      <>\n        <MainWrap>\n          <Guestlist>\n            <Title>Guest List</Title>\n\n            <Line>\n              {data.length <= 0\n                ? 'NO DB ENTRIES YET'\n                : data.map(dat => (\n                    <Point key={data.message}>\n                      <Message>\n                        <span /> {dat.id} <br />\n                        <span> Name: </span>\n                        {dat.message}\n                      </Message>\n                    </Point>\n                  ))}\n            </Line>\n          </Guestlist>\n          <Functions>\n            <div style={{ padding: '10px' }}>\n              <Input\n                type=\"text\"\n                onChange={e => this.setState({ message: e.target.value })}\n                placeholder=\"Fill the name of the guest\"\n              />\n              <Button onClick={() => this.putDataToDB(this.state.message)}>\n                <ButtonText>ADD</ButtonText>\n              </Button>\n            </div>\n            <div style={{ padding: '10px' }}>\n              <Input\n                type=\"text\"\n                onChange={e => this.setState({ idToDelete: e.target.value })}\n                placeholder=\"Write in the number of the guest\"\n              />\n              <Button onClick={() => this.deleteFromDB(this.state.idToDelete)}>\n                <ButtonText> DELETE</ButtonText>\n              </Button>\n            </div>\n            <div style={{ padding: '10px' }}>\n              <Input\n                type=\"text\"\n                onChange={e => this.setState({ idToUpdate: e.target.value })}\n                placeholder=\"Write in the number of the guest\"\n              />\n              <Input\n                type=\"text\"\n                onChange={e => this.setState({ updateToApply: e.target.value })}\n                placeholder=\"Write in the new name of the guest\"\n              />\n              <Button\n                onClick={() =>\n                  this.updateDB(this.state.idToUpdate, this.state.updateToApply)\n                }\n              >\n                <ButtonText>UPDATE</ButtonText>\n              </Button>\n            </div>\n          </Functions>\n          <GlobalStyles />\n        </MainWrap>\n      </>\n    )\n  }\n}\n\nexport default App\n\nconst GlobalStyles = createGlobalStyle`\n  body {\n    @import url('https://fonts.googleapis.com/css?family=Heebo');\n    font-family: 'Heebo', sans-serif;\n  }\n`\n\nconst MainWrap = styled.div`\n  display: flex;\n  margin-top: 10%;\n  margin-left: 10%;\n  margin-right: 10%;\n  justify-content: space-around;\n`\nconst Line = styled.ul`\n  display: flex;\n  flex-direction: row;\n  width: 50%;\n  flex-wrap: wrap;\n  justify-content: flex-start;\n`\nconst Point = styled.li`\n  list-style: none;\n  padding: 10px;\n`\nconst Functions = styled.div`\n  display: flex;\n  width: 40%;\n  flex-direction: column;\n`\nconst Guestlist = styled.div`\n  display: flex;\n  width: 30%;\n  flex-direction: column;\n`\n\nconst Title = styled.h1``\n\nconst Input = styled.input`\n  border: 2px solid #fff829;\n  padding: 20px;\n  width: 55%;\n  margin: 10px;\n`\nconst Button = styled.button`\n  margin-left: 50px;\n  padding: 10px;\n  border: none;\n  min-width: 100px;\n  background-color: #ffff99;\n`\nconst ButtonText = styled.p`\n  font-weight: bold;\n`\nconst Message = styled.div`\n  display: flex;\n`\n"]},"metadata":{},"sourceType":"module"}